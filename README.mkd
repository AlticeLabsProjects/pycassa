Note
====

If you are using Cassandra 0.6.x, you have two options:

1. Get pycassa 0.3.0 from the [Downloads](https://github.com/pycassa/pycassa/downloads). The
   README contained within provides documentation.
2. Download the pycassa-multiversion-beta1 tarball
   from the [Downloads](https://github.com/pycassa/pycassa/Downloads) section.
   See [Multiversion Support](https://github.com/pycassa/pycassa/wiki/Multiversion-Support)
   for more details.

This README applies to the current state of pycassa, which tracks Cassandra 0.7.

See [the wiki](https://github.com/pycassa/pycassa/wiki/Pycassa-%2B-Cassandra-Compatibility)
for more compatibility notes.

pycassa
=======

pycassa is a python client library for Apache Cassandra with the following features:

1. Auto-failover for normal or thread-local connections
2. Connection pooling
3. A batch interface
4. A method to map an existing class to a Cassandra column family

Documentation
-------------

Documentation can be found here:

[http://pycassa.github.com/pycassa/](http://pycassa.github.com/pycassa/)

It includes [installation instructions](http://pycassa.github.com/pycassa/installation.html),
a [tutorial](http://pycassa.github.com/pycassa/tutorial.html),
[API documentation](http://pycassa.github.com/pycassa/api/index.html),
and a [change log](http://pycassa.github.com/pycassa/changelog.html).

Getting Help
------------

IRC:

* Use channel #cassandra on irc.freenode.net. If you don't have an IRC client,
  you can use [freenode's web based client](http://webchat.freenode.net/?channels=#cassandra).

Mailing List:

* User list: [http://groups.google.com/group/pycassa-discuss](http://groups.google.com/group/pycassa-discuss)
* Developer list: [http://groups.google.com/group/pycassa-devel](http://groups.google.com/group/pycassa-devel)

Installation
------------

If easy_install is available, you can use:

    easy_install pycassa

The simplest way to install manually is to copy the pycassa directories to
your program.  If you want to install, make sure you have thrift installed,
and run setup.py as a superuser.

    easy_install thrift05
    python setup.py install

Connecting
----------

All functions are documented with docstrings.  To read usage documentation,
you can use help:

    >>> import pycassa
    >>> help(pycassa.ColumnFamily.get)

To get a connection pool, pass a Keyspace and an optional list of servers:

    >>> pool = pycassa.connect('Keyspace1') # Defaults to connecting to the server at 'localhost:9160'
    >>> pool = pycassa.connect('Keyspace1', ['192.168.2.10:9160'])

See the [tutorial](http://pycassa.github.com/pycassa/tutorial.html#connecting-to-cassandra) for more details.

Basic Usage
-----------

To use the standard interface, create a ColumnFamily instance.

    >>> pool = pycassa.connect('Keyspace1')
    >>> cf = pycassa.ColumnFamily(pool, 'Standard1')
    >>> cf.insert('foo', {'column1': 'val1'})
    1261349837816957
    >>> cf.get('foo')
    {'column1': 'val1'}

insert() also acts to update values:

    >>> cf.insert('foo', {'column1': 'val2'})
    1261349910511572
    >>> cf.get('foo')
    {'column1': 'val2'}

You may insert multiple columns at once:

    >>> cf.insert('bar', {'column1': 'val3', 'column2': 'val4'})
    1261350013606860
    >>> cf.multiget(['foo', 'bar'])
    {'foo': {'column1': 'val2'}, 'bar': {'column1': 'val3', 'column2': 'val4'}}
    >>> cf.get_count('bar')
    2

get_range() returns an iterable. Call it with list() to convert it to a list.

    >>> list(cf.get_range())
    [('bar', {'column1': 'val3', 'column2': 'val4'}), ('foo', {'column1': 'val2'})]
    >>> list(cf.get_range(row_count=1))
    [('bar', {'column1': 'val3', 'column2': 'val4'})]

You can remove entire keys or just a certain column.

    >>> cf.remove('bar', columns=['column1'])
    1261350220106863
    >>> cf.get('bar')
    {'column2': 'val4'}
    >>> cf.remove('bar')
    1261350226926859
    >>> cf.get('bar')
    Traceback (most recent call last):
    ...
    cassandra.ttypes.NotFoundException: NotFoundException()
